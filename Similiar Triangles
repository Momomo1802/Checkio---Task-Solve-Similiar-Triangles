"This is a mission to check the similarity of two triangles.

You are given two lists as coordinates of vertices of each triangle.
You have to return a bool. (The triangles are similar or not)"


from typing import List, Tuple
Coords = List[Tuple[int, int]]
    #Solving it like if you would write it down 
    
    
def similar_triangles(coords_1: Coords, coords_2: Coords) -> bool:
    
    #1. Create squares of each side of the triangle
    square_AB = (coords_1[0][0]-coords_1[1][0])**2 + (coords_1[0][1]-coords_1[1][1])**2
    square_AB2 = (coords_2[0][0]-coords_2[1][0])**2 + (coords_2[0][1]-coords_2[1][1])**2
    
    square_AC = (coords_1[0][0]-coords_1[2][0])**2 + (coords_1[0][1]-coords_1[2][1])**2
    square_AC2 = (coords_2[0][0]-coords_2[2][0])**2 + (coords_2[0][1]-coords_2[2][1])**2
    
    square_BC = (coords_1[1][0]-coords_1[2][0])**2 + (coords_1[1][1]-coords_1[2][1])**2
    square_BC2 = (coords_2[1][0]-coords_2[2][0])**2 + (coords_2[1][1]-coords_2[2][1])**2
    
    #2. Sort squares according to size
    sorted_squares1 = sorted([square_AB,square_AC,square_BC])
    sorted_squares2 = sorted([square_AB2,square_AC2,square_BC2])

    #3. Compare size of squares 
    
    if sorted_squares1[0]/sorted_squares2[0] == sorted_squares1[1]/sorted_squares2[1] and sorted_squares1[0]/sorted_squares2[0] == sorted_squares1[2]/sorted_squares2[2]:
        return True
    else:
        return False



if __name__ == '__main__':
    print("Example:")
    print(similar_triangles([(0, 0), (1, 2), (2, 0)], [(3, 0), (4, 2), (5, 0)]))

    # These "asserts" are used for self-checking and not for an auto-testing
    assert similar_triangles([(0, 0), (1, 2), (2, 0)], [(3, 0), (4, 2), (5, 0)]) is True, 'basic'
    assert similar_triangles([(0, 0), (1, 2), (2, 0)], [(3, 0), (4, 3), (5, 0)]) is False, 'different #1'
    assert similar_triangles([(0, 0), (1, 2), (2, 0)], [(2, 0), (4, 4), (6, 0)]) is True, 'scaling'
    assert similar_triangles([(0, 0), (0, 3), (2, 0)], [(3, 0), (5, 3), (5, 0)]) is True, 'reflection'
    assert similar_triangles([(1, 0), (1, 2), (2, 0)], [(3, 0), (5, 4), (5, 0)]) is True, 'scaling and reflection'
    assert similar_triangles([(1, 0), (1, 3), (2, 0)], [(3, 0), (5, 5), (5, 0)]) is False, 'different #2'
    print("Coding complete? Click 'Check' to earn cool rewards!")
